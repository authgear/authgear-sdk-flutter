name: CI

on:
  push:
    branches:
    - '*'
    - '!gh-pages'
  pull_request:
    branches:
    - '*'
    - '!gh-pages'

jobs:
  test-ios:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    # Xcode_16.2.app is available, but it does not have any simulator pre-installed.
    # So it is not really usable.
    # Let's use Xcode_16.1.app instead.
    - run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
    - uses: subosito/flutter-action@v2
      with:
        # This has to be kept in sync with .tool-versions
        flutter-version: '3.27.1'
        channel: 'stable'
        # This action takes 1m30s to finish. Enable cache to make it shorter.
        cache: true
    - run: make example-flutter-pub-get
    - run: make example-flutter-test
    - run: make example-flutter-analyze
    - run: make example-dart-format
    - run: make example-pod-install
    - run: make example-build-unsigned-ios-app

  test-android:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md#java
    - name: Set java version
      run: |
        echo "JAVA_HOME=$JAVA_HOME_21_arm64" >> $GITHUB_ENV
    - uses: subosito/flutter-action@v2
      with:
        # This has to be kept in sync with .tool-versions
        flutter-version: '3.27.1'
        channel: 'stable'
        # This action takes 1m30s to finish. Enable cache to make it shorter.
        cache: true
    - run: echo "$ANDROID_HOME/tools/bin" >> $GITHUB_PATH
    - run: make example-flutter-pub-get
    - run: make example-flutter-test
    - run: make example-flutter-analyze
    - run: make example-dart-format
    - run: flutter build apk --debug
      working-directory: ./example

  deploy-docs:
    runs-on: ubuntu-24.04
    needs: ["test-ios", "test-android"]
    steps:
    - uses: actions/checkout@v4
    - uses: subosito/flutter-action@v2
      with:
        # This has to be kept in sync with .tool-versions
        flutter-version: '3.27.1'
        channel: 'stable'
        # This action takes 1m30s to finish. Enable cache to make it shorter.
        cache: true
    - run: make sdk-flutter-pub-get
    - run: make sdk-flutter-test
    - run: make sdk-flutter-analyze
    - run: make sdk-dart-format
    # Install the latest dartdoc to avoid a bug
    # See DEVELOPER.md
    - run: flutter pub global activate dartdoc
    - run: flutter pub global run dartdoc
    - name: Deploy docs to gh-pages
      uses: peaceiris/actions-gh-pages@v3
      if: ${{ github.repository == 'authgear/authgear-sdk-flutter' && github.ref == 'refs/heads/main' }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./doc/api

  deploy-ios:
    runs-on: macos-14
    needs: ["test-ios"]
    if: ${{ github.repository == 'authgear/authgear-sdk-flutter' }}
    steps:
    - uses: actions/checkout@v4
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    - run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
    - uses: subosito/flutter-action@v2
      with:
        # This has to be kept in sync with .tool-versions
        flutter-version: '3.27.1'
        channel: 'stable'
        # This action takes 1m30s to finish. Enable cache to make it shorter.
        cache: true
    - run: make example-flutter-pub-get
    - run: make example-flutter-test
    - run: make example-flutter-analyze
    - run: make example-dart-format
    - name: Prepare certificate and provisioning profile
      env:
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
      run: |
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

        echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Install App Store Connect API key
      env:
        IOS_API_KEY_BASE64: ${{ secrets.IOS_API_KEY_BASE64 }}
        IOS_API_KEY_ID: ${{ secrets.IOS_API_KEY_ID }}
      run: |
        API_KEY_PATH=$RUNNER_TEMP/AuthKey_${IOS_API_KEY_ID}.p8
        echo -n "$IOS_API_KEY_BASE64" | base64 --decode -o $API_KEY_PATH
    - name: Create fastlane api key json
      env:
        API_ISSUER: ${{ secrets.IOS_API_KEY_ISSUER }}
        API_KEY: ${{ secrets.IOS_API_KEY_ID }}
      run: |
        export API_KEY_PATH=$RUNNER_TEMP/AuthKey_${API_KEY}.p8
        make fastlane-api-key-json
    - run: make example-pod-install
    - run: make example-build-ios-app
    - name: Upload to TestFlight
      if: ${{ github.ref == 'refs/heads/main' }}
      run: make example-upload-ios-app
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  deploy-android:
    runs-on: macos-14
    needs: ["test-android"]
    # We cannot build in PRs because secrets are not available in PRs.
    if: ${{ github.repository == 'authgear/authgear-sdk-flutter' && github.ref == 'refs/heads/main' }}
    defaults:
      run:
        working-directory: "./example"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: "./.tool-versions"
    # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md#java
    - name: Set java version
      run: |
        echo "JAVA_HOME=$JAVA_HOME_21_arm64" >> $GITHUB_ENV
    - run: npm install -g appcenter-cli
    - uses: subosito/flutter-action@v2
      with:
        # This has to be kept in sync with .tool-versions
        flutter-version: '3.27.1'
        channel: 'stable'
        # This action takes 1m30s to finish. Enable cache to make it shorter.
        cache: true
    - run: flutter pub get
    - run: flutter test
    - run: flutter analyze --no-fatal-infos
    - run: dart format --set-exit-if-changed lib
    - name: Prepare key store
      env:
        ANDROID_KEY_STORE_BASE64: ${{ secrets.ANDROID_KEY_STORE_BASE64 }}
      run: |
        KEY_STORE_PATH=./android/app/keystore.jks

        echo -n "$ANDROID_KEY_STORE_BASE64" | base64 --decode -o "$KEY_STORE_PATH"
    - name: Build .apk
      env:
        STORE_PASSWORD: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      run: |
        BUILD_NUMBER=$(date +%s)
        flutter build apk --build-number $BUILD_NUMBER -P STORE_PASSWORD="$STORE_PASSWORD" -P KEY_PASSWORD="$KEY_PASSWORD" -P KEY_ALIAS="$KEY_ALIAS"
    - name: Distribute to App Center
      env:
        APPCENTER_ACCESS_TOKEN: ${{ secrets.ANDROID_APPCENTER_ACCESS_TOKEN }}
      run: appcenter distribute release --debug --silent --file "./build/app/outputs/flutter-apk/app-release.apk" --group "Collaborators" --app "Oursky/Authgear-Demo-Flutter-Android"
